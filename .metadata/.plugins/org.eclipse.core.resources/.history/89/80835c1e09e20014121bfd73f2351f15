import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.net.Socket;


public class ClientHandler extends Thread{
	int clientID;
	Socket socket;
	Mailbox messageList;
	
	public ClientHandler(Socket socket, Mailbox messageList){
		 this.socket=socket;
		 this.messageList=messageList;
		 clientID = socket.hashCode(); //Collision possibilities, but this is small scale.
	}
	
	public void run() {
		try {
			InputStream is = socket.getInputStream();
			InputStreamReader isr = new InputStreamReader(is);
			BufferedReader reader = new BufferedReader(isr);
			OutputStream os = socket.getOutputStream();
			PrintWriter writer = new PrintWriter(os);
			String line = reader.readLine();
			while( (line != null) && line.compareTo("exit") != 0 ) {
				System.out.println("client sent: " + line);
				writer.write(line + "\r\n");
				writer.flush();
				line = reader.readLine();
			}
			reader.close();
			isr.close();
			is.close();
			writer.close();
			os.close();  // Räcker nog med att stänga socketen, men varför inte.
			socket.close();
			System.out.println("Socket closed");
		} catch (IOException e) {
			e.printStackTrace();
		}

	}
	
	public int getClientID(){
		return clientID;
	}
}
